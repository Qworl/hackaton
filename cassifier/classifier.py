import asyncio
import os

import torch
from gigachat.models import Messages, MessagesRole
from transformers import BertForSequenceClassification, BertTokenizer
import asyncpg
import spacy
from enum import Enum

device = torch.device("cpu")

model = BertForSequenceClassification.from_pretrained("./model.safetensors").to(device)
model.eval()
tokenizer = BertTokenizer.from_pretrained("./model.safetensors")

max_len = 512

nlp = spacy.load("ru_core_news_sm")

label_mapping = {
    0: "Positive",
    1: "Neutral",
    2: "Negative"
}

class Category(Enum):
    CLAIM = 0,
    SUGGESTION = 1,
    GRATITUDE = 2


class SubCategory(Enum):
    NOT_APPLICABLE = 0,
    EMPLOYEE_ERROR = 1,
    TARIFFS_DISAGREEMENT = 2,
    TECHNICAL_FAILURE = 3,
    SERVICE_SPEED = 4


async def database_connect() -> asyncpg.connection.Connection:
    return await asyncpg.connect(user=os.environ.get("POSTGRES_USER", "postgres"),
                                 password=os.environ.get("POSTGRES_PASSWORD", "postgres"),
                                 database=os.environ.get("POSTGRES_DATABASE_NAME", "feedback"),
                                 host=os.environ.get("POSTGRES_HOST", "127.0.0.1"))


def extract_names(text: str):
    doc = nlp(text)
    return [ent.text for ent in doc.ents if ent.label_ == "PER"]


FINANCIAL_KEYWORDS = {
    "деньги", "денег", "деньгам", "деньгами", "деньгах", "счет", "счета", "счету", "счетом", "счете",
    "оплата", "оплаты", "оплате", "оплатой", "оплат", "комиссия", "комиссии", "комиссию", "комиссией",
    "о комиссии", "финансы", "финансов", "финансам", "финансами", "финансах", "выплата", "выплаты",
    "выплате", "выплатой", "выплат", "транзакция", "транзакции", "транзакцию", "транзакцией",
    "транзакциях", "перевод", "перевода", "переводу", "переводом", "переводе", "баланс", "баланса",
    "балансу", "балансом", "балансе", "кредит", "кредита", "кредиту", "кредитом", "кредите",
    "дебет", "дебета", "дебету", "дебетом", "дебете", "платеж", "платежа", "платежу", "платежом",
    "платеже", "доход", "дохода", "доходу", "доходом", "доходе", "расход", "расхода", "расходу",
    "расходом", "расходе", "инвестиция", "инвестиции", "инвестицию", "инвестицией", "инвестициях",
    "валюта", "валюты", "валюте", "валютой", "валютах", "акция", "акции", "акцию", "акцией",
    "акциях", "дивиденд", "дивиденда", "дивиденду", "дивидендом", "дивиденде", "сбережения",
    "сбережений", "сбережениям", "сбережениями", "сбережениях", "накопления", "накоплений",
    "накоплениям", "накоплениями", "накоплениях", "налоги", "налогов", "налогам", "налогами",
    "налогах", "проценты", "процентов", "процентам", "процентами", "процентах", "обналичивание",
    "обналичивания", "обналичиванию", "обналичиванием", "обналичивании", "контракт", "контракта",
    "контракту", "контрактом", "контракте", "финансовый", "финансового", "финансовому", "финансовым",
    "финансовом", "выручка", "выручки", "выручке", "выручкой", "выручках", "бюджет", "бюджета",
    "бюджету", "бюджетом", "бюджете", "списание", "списания", "списанию", "списанием", "списании",
    "пополнение", "пополнения", "пополнению", "пополнением", "пополнении", "займ", "займа",
    "займу", "займом", "займе", "долг", "долга", "долгу", "долгом", "долге", "счет-фактура",
    "счет-фактуры", "счет-фактуре", "счет-фактурой", "счет-фактуре", "чек", "чека", "чеку",
    "чеком", "чеке", "монеты", "монет", "монетам", "монетами", "монетах"
}

EMPLOYEE_ERROR_KEYWORDS = {
    "сотрудник", "сотрудника", "сотруднику", "сотрудником", "сотруднике",
    "работник", "работника", "работнику", "работником", "работнике",
    "человек", "человека", "человеку", "человеком", "человеке",
    "оператор", "оператора", "оператору", "оператором", "операторе",
    "кассир", "кассира", "кассиру", "кассиром", "кассире",
    "операционист", "операциониста", "операционисту", "операционистом", "операционисте",
    "филиал", "филиала", "филиалу", "филиалом", "филиале",
    "персонал", "персонала", "персоналу", "персоналом", "персонале",
    "менеджер", "менеджера", "менеджеру", "менеджером", "менеджере",
    "администратор", "администратора", "администратору", "администратором", "администраторе",
    "инспектор", "инспектора", "инспектору", "инспектором", "инспекторе",
    "руководитель", "руководителя", "руководителю", "руководителем", "руководителе",
    "управляющий", "управляющего", "управляющему", "управляющим", "управляющем",
    "сотрудница", "сотрудницы", "сотруднице", "сотрудницей", "сотрудницах",
    "штат", "штата", "штату", "штатом", "штате",
    "кадры", "кадров", "кадрам", "кадрами", "кадрах",
    "команда", "команды", "команде", "командой", "командах",
    "подразделение", "подразделения", "подразделению", "подразделением", "подразделении",
    "партнер", "партнера", "партнеру", "партнером", "партнере",
    "коллега", "коллеги", "коллеге", "коллегой", "коллегах",
    "начальник", "начальника", "начальнику", "начальником", "начальнике",
    "супервайзер", "супервайзера", "супервайзеру", "супервайзером", "супервайзере",
    "кадровик", "кадровика", "кадровику", "кадровиком", "кадровике",
    "консультант", "консультанта", "консультанту", "консультантом", "консультанте",
    "представитель", "представителя", "представителю", "представителем", "представителе",
    "работодатель", "работодателя", "работодателю", "работодателем", "работодателе",
    "секретарь", "секретаря", "секретарю", "секретарем", "секретаре",
    "служащий", "служащего", "служащему", "служащим", "служащем",
    "заместитель", "заместителя", "заместителю", "заместителем", "заместителе",
    "рекрутер", "рекрутера", "рекрутеру", "рекрутером", "рекрутере"
}

TARIFF_DISAGREEMENT_KEYWORDS = {
    "тариф", "тарифа", "тарифу", "тарифом", "тарифе",
    "правила", "правил", "правилам", "правилами", "правилах",
    "договор", "договора", "договору", "договором", "договоре",
    "заключение", "заключения", "заключению", "заключением", "заключении",
    "расторжение", "расторжения", "расторжению", "расторжением", "расторжении",
    "условия", "условий", "условиям", "условиями", "условиях",
    "план", "плана", "плану", "планом", "плане",
    "подписка", "подписки", "подписке", "подпиской", "подписках",
    "пакет", "пакета", "пакету", "пакетом", "пакете",
    "пользование", "пользования", "пользованию", "пользованием", "пользовании",
    "ограничение", "ограничения", "ограничению", "ограничением", "ограничении",
    "изменение", "изменения", "изменению", "изменением", "изменении",
    "разрешение", "разрешения", "разрешению", "разрешением", "разрешении",
    "регламент", "регламента", "регламенту", "регламентом", "регламенте",
    "обязательства", "обязательств", "обязательствам", "обязательствами", "обязательствах",
    "предоставление", "предоставления", "предоставлению", "предоставлением", "предоставлении",
    "приложение", "приложения", "приложению", "приложением", "приложении",
    "контракт", "контракта", "контракту", "контрактом", "контракте",
    "пересмотр", "пересмотра", "пересмотру", "пересмотром", "пересмотре",
    "дополнение", "дополнения", "дополнению", "дополнением", "дополнении",
    "уточнение", "уточнения", "уточнению", "уточнением", "уточнении",
    "законодательство", "законодательства", "законодательству", "законодательством", "законодательстве",
    "пункты", "пунктов", "пунктам", "пунктами", "пунктах",
    "соглашение", "соглашения", "соглашению", "соглашением", "соглашении",
    "положения", "положений", "положениям", "положениями", "положениях",
    "обновление", "обновления", "обновлению", "обновлением", "обновлении"
}

TECHNICAL_FAILURE_KEYWORDS = {
    "сбой", "сбоя", "сбою", "сбоем", "сбое",
    "авария", "аварии", "аварию", "аварией", "авариях",
    "замедление", "замедления", "замедлению", "замедлением", "замедлении",
    "проблема", "проблемы", "проблеме", "проблемой", "проблемах",
    "завис", "зависла", "зависло", "зависли",
    "погас", "погасла", "погасло", "погасли",
    "ошибка", "ошибки", "ошибке", "ошибкой", "ошибках",
    "неисправность", "неисправности", "неисправностью", "неисправности",
    "неполадка", "неполадки", "неполадке", "неполадкой", "неполадках",
    "отказ", "отказа", "отказу", "отказом", "отказе",
    "обрыв", "обрыва", "обрыву", "обрывом", "обрыве",
    "нарушение", "нарушения", "нарушению", "нарушением", "нарушении",
    "неработает", "перебой", "перебоя", "перебою", "перебоем", "перебое",
    "вылет", "вылета", "вылету", "вылетом", "вылете",
    "глюк", "глюка", "глюку", "глюком", "глюке",
    "подвисание", "подвисания", "подвисанию", "подвисанием", "подвисании",
    "дефект", "дефекта", "дефекту", "дефектом", "дефекте",
    "поломка", "поломки", "поломке", "поломкой", "поломках",
    "искажение", "искажения", "искажению", "искажением", "искажении",
    "разрыв", "разрыва", "разрыву", "разрывом", "разрыве",
    "отключение", "отключения", "отключению", "отключением", "отключении",
    "заморозка", "заморозки", "заморозке", "заморозкой", "заморозках",
    "недоступность", "недоступности", "недоступностью", "недоступности",
    "неактивен", "неактивна", "неактивно", "неактивны",
    "сбой системы", "глючит", "неустойчивость", "неустойчивости", "неустойчивостью", "неустойчивости",
    "зависание", "зависания", "зависанию", "зависанием", "зависании"
}

SERVICE_SPEED_KEYWORDS = {
    "медленно", "быстро", "оперативно", "скорость", "скорости",
    "скоростью", "скоростях", "производительность", "производительности",
    "производительностью", "производительностях", "задержка", "задержки",
    "задержке", "задержкой", "задержках", "ускорение", "ускорения",
    "ускорению", "ускорением", "ускорении", "замедление", "замедления",
    "замедлению", "замедлением", "замедлении", "тормозит", "эффективность",
    "эффективности", "эффективностью", "эффективностях", "мгновенно",
    "ожидание", "ожидания", "ожиданию", "ожиданием", "ожидании",
    "динамика", "динамики", "динамике", "динамикой", "динамиках",
    "время", "времени", "временем", "времена", "временах", "проворство",
    "проворства", "проворству", "проворством", "проворстве", "расторопность",
    "расторопности", "расторопностью", "расторопностях", "ускоренно",
    "немедленно", "затянуто", "реакция", "реакции", "реакциям",
    "реакциями", "реакциях", "обработка", "обработки", "обработке",
    "обработкой", "обработках", "опаздывает", "быстродействие", "моментально",
    "затор", "затора", "затору", "затором", "заторе", "ускорить",
    "оперативность", "оперативности", "оперативностью", "оперативностях",
    "скоро"
}

GRATITUDE_KEYWORDS = {
    "спасибо", "благодарю", "признателен", "признательна", "признательны",
    "спасибочки", "благодарность", "благодарности", "благодарностью",
    "благодарностях", "признательность", "признательности", "признательностью",
    "признательностях", "благодарствую", "поклон", "поклона", "поклону",
    "поклоном", "поклоне", "спасибки", "спасибища", "спасение", "спасения",
    "спасению", "спасением", "спасении", "ценю", "мерси"
}

messages = [
    Messages(
        role=MessagesRole.SYSTEM,
        content="Ты - ассистент сотрудника банка и тебе необходимо определить положительный или отрицательный отзыв. "
                # "Ответь одним словом только да или нет."
                "Также необходимо попытаться определить какой характер имеет обращение:"
                " претензия, благодарность или предложение. Еще постарайся определить связано ли обращение с ошибкой "
                "сотрудника, несогласием с тарифами, технический сбой или скоростью обслуживания. "
                "Дополнительно определи имеет ли вопрос финансовым."
                "Объедини результаты в json следующего формата: {"
                "sentiment:number - Положительный или отрицательный отзыв,"
                "category:number - Характер обращения,"
                "sub_category:number - Дополнительный характер обращения,"
                "is_finance:number - Финансовый вопрос или нет"
                "}",
    ),
    Messages(
        role=MessagesRole.ASSISTANT,
        content="Введите отзыв пользователя вместе с заголовком и основным текстом.")
]


# Классификация отзывов
def classify_feedback(title: str, text: str) -> (Category, SubCategory, bool):
    full_text = (title + " " + text).lower()

    # sentiment = classifier(full_text)[0]
    #
    # # Основные категории
    # if sentiment['label'] == 'NEGATIVE':
    #     cur_category = Category.CLAIM
    # elif sentiment['label'] == 'POSITIVE':
    #     if any(word in full_text for word in GRATITUDE_KEYWORDS):
    #         cur_category = Category.GRATITUDE
    #     else:
    #         cur_category = Category.SUGGESTION
    # else:
    #     cur_category = Category.SUGGESTION

    encodings = tokenizer(
        [full_text],
        max_length=max_len,
        padding="max_length",
        truncation=True,
        return_tensors="pt"
    )

    input_ids = encodings["input_ids"].to(device)
    attention_mask = encodings["attention_mask"].to(device)

    with torch.no_grad():
        outputs = model(input_ids=input_ids, attention_mask=attention_mask)
        logits = outputs.logits
        predictions = torch.argmax(logits, dim=1).cpu().numpy()

    decoded_predictions = [label_mapping[pred] for pred in predictions]

    resp_text = decoded_predictions[0]

    if resp_text == 2:
        cur_category = Category.CLAIM
    elif resp_text == 0:
        if any(word in full_text for word in GRATITUDE_KEYWORDS):
            cur_category = Category.GRATITUDE
        else:
            cur_category = Category.SUGGESTION
    else:
        cur_category = Category.SUGGESTION

    # Подкатегории
    cur_subcategory, cur_finance_related = None, False

    if any(word in full_text for word in FINANCIAL_KEYWORDS):
        cur_finance_related = True

    if cur_category == Category.GRATITUDE:
        return cur_category, cur_subcategory, cur_finance_related

    if any(word in full_text for word in EMPLOYEE_ERROR_KEYWORDS) or extract_names(title + " " + text):
        cur_subcategory = SubCategory.EMPLOYEE_ERROR
    elif any(word in full_text for word in TARIFF_DISAGREEMENT_KEYWORDS):
        cur_subcategory = SubCategory.TARIFFS_DISAGREEMENT
    elif any(word in full_text for word in TECHNICAL_FAILURE_KEYWORDS):
        cur_subcategory = SubCategory.TECHNICAL_FAILURE
    elif any(word in full_text for word in GRATITUDE_KEYWORDS):
        cur_subcategory = SubCategory.SERVICE_SPEED

    return cur_category, cur_subcategory, cur_finance_related


async def main():
    con: None | asyncpg.connection.Connection = None
    try:

        con = await database_connect()
        table_name = os.environ.get("POSTGRES_TABLE_NAME", "")
        values: list[asyncpg.Record] = con.fetch(
            f"SELECT * FROM {table_name} WHERE is_new = TRUE")

        for value in values:
            record_id = value.get("id")
            title = value.get("title")
            content = value.get("content")
            category, subcategory, finance_related = classify_feedback(title, content)
            await con.execute(
                f'UPDATE {table_name} SET is_new = False, is_quailfied = True, feedback_type = {category.value()},'
                f'is_finance = {finance_related}, subcategory_type = {subcategory.value()} WHERE id = {record_id}')
    finally:
        if con:
            await con.close()


if __name__ == '__main__':
    asyncio.run(main())
